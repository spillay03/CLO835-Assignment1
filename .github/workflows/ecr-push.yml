name: run-cats-img
on: 
 push: 
  branches: [ main ]
jobs:
  job1:
      name: Build Image
      runs-on: ubuntu-latest
      outputs:
        matrix: ${{ steps.set-matrix.outputs.matrix }}

      steps:

      - name: Check out code
        uses: actions/checkout@v2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: us-east-1
        
      - name: Build, test, tag, and push image to Amazon ECR
        env:
         ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
         ECR_REPOSITORY: cats
         IMAGE_TAG: v0.1
        run: |
         cd cats/
         ls -ltra
    
         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

         docker run -d -p 80:80 --name nodeapp $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
         docker ps
         echo "Pause for 10 seconds to let container start"
         sleep 10
         curl localhost -vvv
         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
      - id: set-matrix
     
job2:
   needs: job1
   name: Build Image1
   strategy:
     matrix: ${{fromJSON(needs.job1.outputs.matrix)}}
   runs-on: ubuntu-latest
   steps:

      - name: Check out code
        uses: actions/checkout@v2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
          AWS_REGION: us-east-1
        
      - name: Build, test, tag, and push image to Amazon ECR
        env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: dogs
        IMAGE_TAG: v0.1
        run: |
         cd dogs/
         ls -ltra
    
         docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .

         docker run -d -p 81:80 --name nodeapp $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
         docker ps
         echo "Pause for 10 seconds to let container start"
         sleep 10
         curl localhost -vvv
         docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
         
